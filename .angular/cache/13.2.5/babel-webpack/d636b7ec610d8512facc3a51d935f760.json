{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as auth from 'oidc-auth/index.js';\nimport { BehaviorSubject, of } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport { delay, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let ImplicitAutenticationService = /*#__PURE__*/(() => {\n  class ImplicitAutenticationService {\n    constructor() {\n      this.timeActiveAlert = 4000;\n      this.timeLogoutBefore = 1000; // logout before in miliseconds\n\n      this.timeAlert = 300000; // alert in miliseconds 5 minutes\n\n      this.userSubject = new BehaviorSubject({});\n      this.user$ = this.userSubject.asObservable();\n      this.menuSubject = new BehaviorSubject({});\n      this.menu$ = this.menuSubject.asObservable();\n      this.logoutSubject = new BehaviorSubject('');\n      this.logout$ = this.logoutSubject.asObservable();\n      this.session = null;\n      document.addEventListener(\"visibilitychange\", () => {\n        if (document.visibilityState === 'visible') {\n          const expires = this.setExpiresAt();\n          this.autologout(expires);\n        }\n      });\n      this.bearerHttpOptions = {\n        headers: new HttpHeaders({\n          'Accept': 'application/json',\n          'authorization': 'Bearer ' + window.localStorage.getItem('access_token')\n        })\n      };\n      auth.setGeneral(environment.TOKEN);\n    }\n\n    init() {\n      const id_token = window.localStorage.getItem('id_token');\n\n      if (window.localStorage.getItem('id_token') === null) {\n        var params = {},\n            queryString = location.hash.substring(1),\n            regex = /([^&=]+)=([^&]*)/g;\n        let m;\n\n        while (m = regex.exec(queryString)) {\n          params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n        } // And send the token over to the server\n\n\n        const req = new XMLHttpRequest(); // consider using POST so query isn't logged\n\n        const query = 'https://' + window.location.host + '?' + queryString;\n        req.open('GET', query, true);\n\n        if (!!params['id_token']) {\n          //if token setear\n          const id_token_array = params['id_token'].split('.');\n          const payload = JSON.parse(atob(id_token_array[1]));\n          window.localStorage.setItem('access_token', params['access_token']);\n          window.localStorage.setItem('expires_in', params['expires_in']);\n          window.localStorage.setItem('state', params['state']);\n          window.localStorage.setItem('id_token', params['id_token']); // this.userSubject.next({ user: payload });\n\n          this.bearerHttpOptions = {\n            headers: new HttpHeaders({\n              'Accept': 'application/json',\n              'Authorization': `Bearer ${params['access_token']}`\n            })\n          };\n          this.updateAuth(payload);\n        } else {\n          this.clearStorage();\n        }\n\n        req.onreadystatechange = function (e) {\n          if (req.readyState === 4) {\n            if (req.status === 200) {// window.location = params.state;\n            } else if (req.status === 400) {\n              window.alert('There was an error processing the token.');\n            } else {}\n          }\n        };\n      } else {\n        const id_token = window.localStorage.getItem('id_token').split('.');\n        const payload = JSON.parse(atob(id_token[1]));\n        this.updateAuth(payload);\n      }\n\n      const expires = this.setExpiresAt();\n      this.autologout(expires);\n      this.clearUrl();\n    }\n\n    logout(action = 'logout-auto') {\n      const state = localStorage.getItem('state');\n      const idToken = localStorage.getItem('id_token');\n\n      if (!!state && !!idToken) {\n        this.logoutUrl = environment.TOKEN.SIGN_OUT_URL;\n        this.logoutUrl += '?id_token_hint=' + idToken;\n        this.logoutUrl += '&post_logout_redirect_uri=' + environment.TOKEN.SIGN_OUT_REDIRECT_URL;\n        this.logoutUrl += '&state=' + state;\n        this.clearStorage();\n        this.logoutSubject.next(action);\n        window.location.replace(this.logoutUrl);\n      }\n\n      auth.logout();\n    }\n\n    getPayload() {\n      return auth.getPayload();\n    }\n\n    clearUrl() {\n      const clean_uri = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, clean_uri);\n    }\n\n    live() {\n      if (auth.live(true)) {\n        auth.liveToken();\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    getAuthorizationUrl(button) {\n      return auth.live(button);\n    }\n\n    autologout(expires) {\n      if (expires) {\n        const expiresIn = new Date(expires).getTime() - new Date().getTime();\n\n        if (expiresIn < this.timeLogoutBefore) {\n          this.clearStorage();\n          this.logoutSubject.next('logout-auto-only-localstorage');\n          location.reload();\n        } else {\n          const timerDelay = expiresIn > this.timeLogoutBefore ? expiresIn - this.timeLogoutBefore : this.timeLogoutBefore;\n\n          if (!isNaN(expiresIn)) {\n            console.log(`%cFecha expiración: %c${new Date(expires)}`, 'color: blue', 'color: green');\n            of(null).pipe(delay(timerDelay - this.timeLogoutBefore)).subscribe(data => {\n              this.logout('logout-auto');\n            });\n\n            if (this.timeAlert < timerDelay) {\n              of(null).pipe(delay(timerDelay - this.timeAlert)).subscribe(data => {\n                Swal.fire({\n                  position: 'top-end',\n                  icon: 'info',\n                  title: `Su sesión se cerrará en ${this.timeAlert / 60000} minutos`,\n                  showConfirmButton: false,\n                  timer: this.timeActiveAlert\n                });\n              });\n            }\n          }\n        }\n      }\n    }\n\n    expired() {\n      return new Date(window.localStorage.getItem('expires_at')) < new Date();\n    }\n\n    updateAuth(payload) {\n      console.log('payload', payload);\n      const user = localStorage.getItem('user');\n\n      if (user) {\n        this.userSubject.next(JSON.parse(atob(user)));\n      } else {\n        this.bearerHttpOptions = {\n          headers: new HttpHeaders({\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n          })\n        };\n        const userTemp = payload.email;\n        this.user = {\n          user: userTemp\n        };\n        this.httpClient.post(environment.API_GET_IDENTIFICATION, {\n          user: payload.email\n        }, this.bearerHttpOptions).pipe(retry(3)).subscribe(res => {\n          this.clearUrl();\n          localStorage.setItem('user', btoa(JSON.stringify(Object.assign({\n            user: payload\n          }, {\n            userService: res\n          }))));\n          this.userSubject.next(Object.assign({\n            user: payload\n          }, {\n            userService: res\n          }));\n        }, error => console.log(error));\n        this.bearerHttpOptions = {\n          headers: new HttpHeaders({\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n          })\n        };\n      }\n    }\n\n    clearStorage() {\n      window.localStorage.removeItem('access_token');\n      window.localStorage.removeItem('id_token');\n      window.localStorage.removeItem('expires_in');\n      window.localStorage.removeItem('state');\n      window.localStorage.removeItem('expires_at');\n      window.localStorage.removeItem('menu');\n      window.localStorage.removeItem('user');\n      window.localStorage.removeItem('apps_menu');\n    }\n\n    setExpiresAt() {\n      const expiresAt = localStorage.getItem('expires_at');\n\n      if (!expiresAt || expiresAt === 'Invalid Date') {\n        const expiresAtDate = new Date();\n        expiresAtDate.setSeconds(expiresAtDate.getSeconds() + parseInt(window.localStorage.getItem('expires_in'), 10));\n        window.localStorage.setItem('expires_at', new Date(expiresAtDate).toUTCString());\n        return new Date(expiresAtDate);\n      } else {\n        return expiresAt === 'Invalid Date' ? false : new Date(expiresAt);\n      }\n    }\n\n  }\n\n  ImplicitAutenticationService.ɵfac = function ImplicitAutenticationService_Factory(t) {\n    return new (t || ImplicitAutenticationService)();\n  };\n\n  ImplicitAutenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImplicitAutenticationService,\n    factory: ImplicitAutenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImplicitAutenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}