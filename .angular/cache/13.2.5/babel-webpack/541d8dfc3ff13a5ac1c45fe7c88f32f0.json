{"ast":null,"code":"import { __awaiter, __decorate, __rest } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { ImplicitAutenticationService } from '../../@core/utils/implicit_autentication.service';\n\nclass DataInfoTercero {\n  constructor() {\n    this.Id = \"\";\n    this.NombreCompleto = \"\";\n    this.LugarOrigen = \"\";\n    this.FechaNacimiento = \"\";\n    this.TipoDocumento = \"\";\n    this.Genero = \"\";\n    this.EstadoCivil = \"\";\n    this.UsuarioWSO2 = \"\";\n  }\n\n}\n\nlet InfoPersonalPage = class InfoPersonalPage {\n  constructor(terceroHerlper, infoPersonalService) {\n    this.terceroHerlper = terceroHerlper;\n    this.infoPersonalService = infoPersonalService;\n    this.autenticacion = new ImplicitAutenticationService(); // loadFormDataFunction: (...params) => Observable<any>;\n\n    this.dataTercero = [];\n    this.dataInfo = new DataInfoTercero();\n  }\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        email\n      } = this.autenticacion.getPayload();\n      console.log(this.autenticacion.getPayload());\n      const body = {\n        \"user\": email\n      };\n      this.dataInfo.UsuarioWSO2 = email;\n\n      const _a = yield this.infoPersonalService.getDocumentIdByEmail(environment.API_GET_IDENTIFICATION, body).toPromise(),\n            {\n        documento,\n        documento_compuesto\n      } = _a,\n            rest = __rest(_a, [\"documento\", \"documento_compuesto\"]);\n\n      if (!documento) {\n        console.log(\"Something went wrong, when try to get the identification\");\n        return;\n      } // Setear generos\n\n\n      let maritalStatus = yield this.infoPersonalService.getInfoComplementariaTercero(environment.TERCEROS_SERVICE, `/info_complementaria/?query=GrupoInfoComplementariaId.Id:${environment.ID_GRUPO_ESTADO_CIVIL}` + `&fields=Id,Nombre`).toPromise();\n      this.arrMaritalStatus = maritalStatus;\n      console.log('civul status', maritalStatus);\n      const data = yield this.infoPersonalService.getInformationByDocument(environment.DATOS_IDENTIFICACION_TERCERO_ENDPOINT, documento).toPromise();\n      this.arrPersonalInfo = data;\n      console.log(data, rest);\n      this.dataInfo.NombreCompleto = data[0].TerceroId.NombreCompleto;\n      this.dataInfo.TipoDocumento = documento_compuesto.substring(0, 2);\n      this.dataInfo.Id = documento_compuesto.substring(2);\n      this.dataInfo.FechaNacimiento = new Date(data[0].TerceroId.FechaNacimiento).toISOString().replace(/T/, ' ').replace(/\\..+/, '').slice(0, -9);\n      this.dataInfo.LugarOrigen = data[0].TerceroId.LugarOrigen;\n      const Id = data[0].TerceroId.Id; // id del tercero\n\n      this.idPersonalInfo = Id;\n      console.log('ID DEL TERCERO ', Id);\n      yield this.getDataInfoComplementariaTercero(environment.IDS_INFO_COMPLEMENTARIA_ESTADO_CIVIL, 'EstadoCivil');\n      yield this.getDataInfoComplementariaTercero(environment.IDS_INFO_COMPLEMENTARIA_GENERO, 'Genero');\n    });\n  }\n\n  getDataInfoComplementariaTercero(arrIds, fieldToSet) {\n    return __awaiter(this, void 0, void 0, function* () {\n      arrIds.forEach(id => __awaiter(this, void 0, void 0, function* () {\n        let data = yield this.infoPersonalService.getInfoComplementariaTercero(environment.TERCEROS_SERVICE, `/info_complementaria_tercero/?query=TerceroId.Id:${this.idPersonalInfo}` + `,InfoComplementariaId.Id:${id}`).toPromise();\n\n        if (Object.keys(data[0]).length > 0) {\n          console.log('data[0]', data[0]);\n          this.dataInfo[fieldToSet] = data[0].InfoComplementariaId.Nombre;\n          return true;\n        }\n      }));\n      return;\n    });\n  }\n\n  cleanInfoToUpdate({\n    Numero,\n    DigitoVerificacion,\n    FechaExpedicion,\n    CiudadExpedicion,\n    Activo,\n    DocumentoSoporte,\n    FechaCreacion,\n    FechaModificacion\n  }) {\n    return {\n      Numero,\n      DigitoVerificacion,\n      FechaExpedicion: new Date(FechaExpedicion).toISOString(),\n      CiudadExpedicion,\n      Activo,\n      DocumentoSoporte,\n      FechaCreacion: new Date(FechaCreacion).toISOString(),\n      FechaModificacion: new Date(FechaModificacion).toISOString()\n    };\n  }\n\n  getInfoTercero(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.dataInfo = yield this.terceroHerlper.getTerceros(id).toPromise();\n      this.getDateBirth();\n    });\n  }\n\n  getDateBirth() {\n    const d = new Date(this.dataInfo.FechaNacimiento);\n    const ye = new Intl.DateTimeFormat('es', {\n      year: 'numeric'\n    }).format(d);\n    const mo = new Intl.DateTimeFormat('es', {\n      month: 'short'\n    }).format(d);\n    const da = new Intl.DateTimeFormat('es', {\n      day: '2-digit'\n    }).format(d);\n    this.dateBirth = da + '-' + mo + '-' + ye;\n  }\n\n  updatePersonalInfo() {\n    if (this.idPersonalInfo && this.arrPersonalInfo) {\n      console.log('this.arrPersonalInfo', this.arrPersonalInfo); // this.infoPersonalService.updateInformation(environment.DATOS_IDENTIFICACION_TERCERO_ENDPOINT + `/${this.idPersonalInfo}`, this.cleanInfoToUpdate({ ...this.arrPersonalInfo }))\n      //   .subscribe((data) => {\n      //     console.log(data, \"Resultado de la actualizacion\");\n      //   })\n    } else {\n      alert(\"Espera a que cargue la informaci√≥n.\");\n    }\n  }\n\n};\nInfoPersonalPage = __decorate([Component({\n  selector: 'app-info-personal',\n  templateUrl: './info-personal.page.html',\n  styleUrls: ['./info-personal.page.scss']\n})], InfoPersonalPage);\nexport { InfoPersonalPage };","map":null,"metadata":{},"sourceType":"module"}