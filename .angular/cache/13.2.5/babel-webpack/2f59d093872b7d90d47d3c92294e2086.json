{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./errorManager\";\n/**\r\n * This class manage the http connections with internal REST services. Use the response format {\r\n *  Code: 'xxxxx',\r\n *  Body: 'Some Data' (this element is returned if the request is success)\r\n *  ...\r\n * }\r\n */\n\nexport let RequestManager = /*#__PURE__*/(() => {\n  class RequestManager {\n    constructor(http, errManager) {\n      this.http = http;\n      this.errManager = errManager;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /**\r\n     * Use for set the source path of the service (service's name must be present at src/app/app-config.ts)\r\n     * @param service: string\r\n     */\n\n\n    setPath(service) {\n      this.path = environment[service];\n    }\n    /**\r\n     * Perform a GET http request\r\n     * @param endpoint service's end-point\r\n     * @param params (a Key, Value object with que query params for the request)\r\n     * @returns Observable<any>\r\n     */\n\n\n    get(endpoint, params) {\n      const queryParams = new HttpParams();\n\n      if (params) {\n        for (const [key, value] of Object.entries(params)) {\n          queryParams.append(key, value + '');\n        }\n      }\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Accept': 'application/json',\n          'authorization': `Bearer ${window.localStorage.getItem('access_token')}`\n        })\n      };\n      this.httpOptions.params = queryParams;\n      return this.http.get(`${this.path}${endpoint}`, this.httpOptions).pipe(map(res => {\n        if (res && res.hasOwnProperty('Body') && res['Type'] !== 'error') {\n          return res['Body'];\n        } else {\n          return res;\n        }\n      }));\n    }\n\n  }\n\n  RequestManager.ɵfac = function RequestManager_Factory(t) {\n    return new (t || RequestManager)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorManager));\n  };\n\n  RequestManager.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestManager,\n    factory: RequestManager.ɵfac,\n    providedIn: 'root'\n  });\n  return RequestManager;\n})();","map":null,"metadata":{},"sourceType":"module"}