{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const handleError = error => {\n  if (error.error instanceof ErrorEvent) {// A client-side or network error occurred. Handle it accordingly.\n    // console.log(error)\n    // console.error('An error occurred:', error.error.message);\n  } else {// The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n    // console.error(\n    //   `Backend returned code ${error.status}, ` +\n    //   `body was: ${error.error}`);\n    // console.log(error)\n  }\n\n  return error; // return an observable with a user-facing error message\n  // return throwError({\n  //   status: error,\n  //   message: 'Something bad happened; please try again later.',\n  // });\n};\nexport let InfoPersonalService = /*#__PURE__*/(() => {\n  class InfoPersonalService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n\n    getOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'authorization': 'Bearer ' + window.localStorage.getItem('access_token')\n        })\n      };\n    }\n\n    createTercero(endpoint, data) {\n      return this.httpClient.post(endpoint, data, this.getOptions());\n    }\n\n    getDocumentIdByEmail(endpoint, data) {\n      return this.httpClient.post(endpoint, data, this.getOptions());\n    }\n\n    getPersonalDataTerceroByDocumentId(endpoint, document) {\n      return this.httpClient.get(endpoint + `?query=Numero:${document}`, this.getOptions());\n    }\n\n    getInformationByDocument(endpoint, document) {\n      return this.httpClient.get(endpoint + `?query=Numero:${document}`, this.getOptions());\n    }\n\n    getInfoComplementariaGenero(endpoint, params) {\n      return this.httpClient.get(endpoint, params);\n    }\n\n    getDocumentTypes(endpoint) {\n      return this.httpClient.get(endpoint, this.getOptions());\n    }\n\n    updateInformation(endpoint, data) {\n      return this.httpClient.put(endpoint, data, this.getOptions());\n    }\n\n  }\n\n  InfoPersonalService.ɵfac = function InfoPersonalService_Factory(t) {\n    return new (t || InfoPersonalService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  InfoPersonalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InfoPersonalService,\n    factory: InfoPersonalService.ɵfac,\n    providedIn: 'root'\n  });\n  return InfoPersonalService;\n})();","map":null,"metadata":{},"sourceType":"module"}