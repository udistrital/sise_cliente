{"ast":null,"code":"import { hash } from './md5.js';\nvar GENERAL = {\n  ENTORNO: {\n    TOKEN: {}\n  }\n};\nvar logout_url = \"\";\nvar setting_bearer = {\n  headers: {}\n};\n\nif (window.localStorage.getItem('access_token') === null || window.localStorage.getItem('access_token') === undefined) {\n  var params = {},\n      queryString = location.hash.substring(1),\n      regex = /([^&=]+)=([^&]*)/g;\n  let m;\n\n  while (m = regex.exec(queryString)) {\n    params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  } // And send the token over to the server\n\n\n  const req = new XMLHttpRequest(); // consider using POST so query isn't logged\n\n  const query = 'https://' + window.location.host + '?' + queryString;\n  req.open('GET', query, true);\n\n  if (params['id_token'] !== null && params['id_token'] !== undefined) {\n    window.localStorage.setItem('access_token', params['access_token']); //if token setear\n\n    window.localStorage.setItem('id_token', params['id_token']);\n    window.localStorage.setItem('expires_in', params['expires_in']);\n    window.localStorage.setItem('state', params['state']);\n  } else {\n    clearStorage();\n  }\n\n  req.onreadystatechange = function (e) {\n    if (req.readyState === 4) {\n      if (req.status === 200) {// window.location = params.state;\n      } else if (req.status === 400) {\n        window.alert('There was an error processing the token.');\n      } else {}\n    }\n  };\n}\n\nsetExpiresAt();\ntimer();\nclearUrl();\nexport function setGeneral(url_token) {\n  GENERAL.ENTORNO.TOKEN = url_token;\n}\nexport function logout() {\n  logout_url = GENERAL.ENTORNO.TOKEN.SIGN_OUT_URL;\n  logout_url += '?id_token_hint=' + window.localStorage.getItem('id_token');\n  logout_url += '&post_logout_redirect_uri=' + GENERAL.ENTORNO.TOKEN.SIGN_OUT_REDIRECT_URL;\n  logout_url += '&state=' + window.localStorage.getItem('state');\n  clearStorage();\n  window.location.replace(logout_url);\n}\nexport function clearUrl() {\n  const clean_uri = window.location.origin + window.location.pathname;\n  window.history.replaceState({}, document.title, clean_uri);\n}\nexport function getPayload() {\n  const id_token = window.localStorage.getItem('id_token').split('.');\n  return JSON.parse(atob(id_token[1]));\n}\nexport function logoutValid() {\n  var state;\n  var valid = true;\n  var queryString = location.search.substring(1);\n  var regex = /([^&=]+)=([^&]*)/g;\n  var m;\n\n  while (!!(m = regex.exec(queryString))) {\n    state = decodeURIComponent(m[2]);\n  }\n\n  if (window.localStorage.getItem('state') === state) {\n    clearStorage();\n    valid = true;\n  } else {\n    valid = false;\n  }\n\n  return valid;\n} // el flag es un booleano que define si abra boton de login\n\nexport function live(flag) {\n  if (window.localStorage.getItem('id_token') === 'undefined' || window.localStorage.getItem('id_token') === null || logoutValid()) {\n    if (!flag) {\n      getAuthorizationUrl();\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n}\nexport function liveToken() {\n  setting_bearer = {\n    headers: new Headers({\n      headers: {\n        'Accept': 'application/json',\n        \"Authorization\": \"Bearer \" + window.localStorage.getItem('access_token')\n      }\n    })\n  };\n}\nexport function getHeader() {\n  setting_bearer = {\n    headers: {\n      'Accept': 'application/json',\n      \"Authorization\": \"Bearer \" + window.localStorage.getItem('access_token')\n    }\n  };\n  return setting_bearer;\n}\nexport function getAuthorizationUrl() {\n  params = GENERAL.ENTORNO.TOKEN;\n\n  if (!params.nonce) {\n    params.nonce = generateState();\n  }\n\n  if (!params.state) {\n    params.state = generateState();\n  }\n\n  let url = params.AUTORIZATION_URL + '?' + 'client_id=' + encodeURIComponent(params.CLIENTE_ID) + '&' + 'redirect_uri=' + encodeURIComponent(params.REDIRECT_URL) + '&' + // + window.location.href + '&' para redirect con regex\n  'response_type=' + encodeURIComponent(params.RESPONSE_TYPE) + '&' + 'scope=' + encodeURIComponent(params.SCOPE) + '&' + 'state_url=' + encodeURIComponent(window.location.hash);\n\n  if (params.nonce) {\n    url += '&nonce=' + encodeURIComponent(params.nonce);\n  }\n\n  url += '&state=' + encodeURIComponent(params.state);\n  window.location = url;\n  return url;\n}\nexport function generateState() {\n  const text = ((Date.now() + Math.random()) * Math.random()).toString().replace('.', '');\n  return hash(text);\n}\nexport function setExpiresAt() {\n  if (window.localStorage.getItem('expires_at') === null || window.localStorage.getItem('expires_at') === undefined || window.localStorage.getItem('expires_at') === 'Invalid Date') {\n    const expires_at = new Date();\n    expires_at.setSeconds(expires_at.getSeconds() + parseInt(window.localStorage.getItem('expires_in'), 10) - 60);\n    window.localStorage.setItem('expires_at', expires_at.toUTCString());\n  }\n}\nexport function expired() {\n  return new Date(window.localStorage.getItem('expires_at')) < new Date();\n}\nexport function timer() {\n  setInterval(() => {\n    if (window.localStorage.getItem('expires_at') !== null) {\n      if (expired()) {\n        logout();\n        clearStorage();\n      }\n    } else {\n      window.location.reload();\n    }\n  }, 5000);\n}\nexport function clearStorage() {\n  window.localStorage.removeItem('access_token');\n  window.localStorage.removeItem('id_token');\n  window.localStorage.removeItem('expires_in');\n  window.localStorage.removeItem('state');\n  window.localStorage.removeItem('expires_at');\n}","map":null,"metadata":{},"sourceType":"module"}